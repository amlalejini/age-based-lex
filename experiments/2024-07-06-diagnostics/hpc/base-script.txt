#!/bin/bash

# This is a template for generating submissions scripts - 1 per condition set

# TODO: Fix this tree
# GPTP2024 [CONFIG_DIR] [REPO_DIR]
# ├── config_file1.mabe
# ├── config_file2.mabe
# ├── MABE
# ├── ... (more .mabe files)
# └── /YYYY_MM_DD_HH_MM [DATA_DIR]
#     ├── jobs [JOB_DIR]
#     │   ├── set1
#     │   │   ├── job1.sh
#     │   │   └── job2.sh
#     │   ├── set2
#     │   └── ... (other subdirectories containing submission scripts)
#     ├── Conditions_SEED1 [RUN_DIR]
#         │   ├── config_file1.mabe
#         │   ├── config_file2.mabe
#         │   ├── MABE
#         │   └── ... (other run files)
#         ├── Conditions_SEED2 [RUN_DIR]
#         │   ├── config_file1.mabe
#         │   ├── config_file2.mabe
#         │   ├── MABE
#         │   └── ... (other run files)
#         └── ... (more run directories) [RUN_DIR]

########## Define Resources Needed with SBATCH ##########

#SBATCH --job-name <<JOB_NAME>>             # you can give your job a name for easier identification (same as -J)

#SBATCH --time=<<TIME_REQUEST>>             # limit of wall clock time - how long the job will run (same as -t)
#SBATCH --array=<<ARRAY_ID_RANGE>>          # Number of replicates, replace ARRAY_ID_RANGE with the range of array indices e.g. 0-99
# you only need to specify resources required for a single task, not the entire array
#SBATCH --mem=<<MEMORY_REQUEST>>            # memory required per node - amount of memory (in bytes)
#SBATCH --partition=<<PARTITION_NAME>>

#SBATCH --mail-type=END,FAIL                # Mail if jobs end, or fail
#SBATCH --mail-user=suzuekar@msu.edu

########## Command Lines to Run ##########

ENV=<<ENV>> # Conda environment placeholder

module purge
module load Conda/3
conda activate ${ENV}
module load GCCcore/13.1.0 

JOB_SEED_OFFSET=<<JOB_SEED_OFFSET>>
SEED=$((JOB_SEED_OFFSET + SLURM_ARRAY_TASK_ID - 1))

EXEC=<<EXEC>> 
EXEC_DIR=<<EXEC_DIR>> 

CONFIG_DIR=<<CONFIG_DIR>> 
REPO_DIR=<<REPO_DIR>>
DATA_DIR=<<DATA_DIR>>

RUN_DIR=<<RUN_DIR>> 

# Make new run folder
mkdir -p ${RUN_DIR}
cd ${RUN_DIR}

# Copy .mabe files and MABE executable to run folder
cp ${CONFIG_DIR}/*.mabe . 
cp ${EXEC_DIR}/${EXEC} .

######## Run experiment ########
# Ensures the current directory is the run directory
cd ${RUN_DIR}

<<CFG_RUN_COMMANDS>>

<<RUN_COMMANDS>>

######## Clean up ########
rm ${RUN_DIR}/*.mabe
rm ${RUN_DIR}/${EXEC}

